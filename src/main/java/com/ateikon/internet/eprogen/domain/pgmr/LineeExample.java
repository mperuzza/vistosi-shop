package com.ateikon.internet.eprogen.domain.pgmr;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LineeExample {
    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table pgmr.linee
     *
     * @ibatorgenerated Mon Feb 23 19:20:39 CET 2009
     */
    protected String orderByClause;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table pgmr.linee
     *
     * @ibatorgenerated Mon Feb 23 19:20:39 CET 2009
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table pgmr.linee
     *
     * @ibatorgenerated Mon Feb 23 19:20:39 CET 2009
     */
    public LineeExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table pgmr.linee
     *
     * @ibatorgenerated Mon Feb 23 19:20:39 CET 2009
     */
    protected LineeExample(LineeExample example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table pgmr.linee
     *
     * @ibatorgenerated Mon Feb 23 19:20:39 CET 2009
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table pgmr.linee
     *
     * @ibatorgenerated Mon Feb 23 19:20:39 CET 2009
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table pgmr.linee
     *
     * @ibatorgenerated Mon Feb 23 19:20:39 CET 2009
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table pgmr.linee
     *
     * @ibatorgenerated Mon Feb 23 19:20:39 CET 2009
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table pgmr.linee
     *
     * @ibatorgenerated Mon Feb 23 19:20:39 CET 2009
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table pgmr.linee
     *
     * @ibatorgenerated Mon Feb 23 19:20:39 CET 2009
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table pgmr.linee
     *
     * @ibatorgenerated Mon Feb 23 19:20:39 CET 2009
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table pgmr.linee
     *
     * @ibatorgenerated Mon Feb 23 19:20:39 CET 2009
     */
    public static class Criteria {
        protected List<String> criteriaWithoutValue;

        protected List<Map<String, Object>> criteriaWithSingleValue;

        protected List<Map<String, Object>> criteriaWithListValue;

        protected List<Map<String, Object>> criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList<String>();
            criteriaWithSingleValue = new ArrayList<Map<String, Object>>();
            criteriaWithListValue = new ArrayList<Map<String, Object>>();
            criteriaWithBetweenValue = new ArrayList<Map<String, Object>>();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List<String> getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List<Map<String, Object>> getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List<Map<String, Object>> getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List<Map<String, Object>> getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List<? extends Object> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List<Object> list = new ArrayList<Object>();
            list.add(value1);
            list.add(value2);
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andCdlineaIsNull() {
            addCriterion("cdlinea is null");
            return this;
        }

        public Criteria andCdlineaIsNotNull() {
            addCriterion("cdlinea is not null");
            return this;
        }

        public Criteria andCdlineaEqualTo(Integer value) {
            addCriterion("cdlinea =", value, "cdlinea");
            return this;
        }

        public Criteria andCdlineaNotEqualTo(Integer value) {
            addCriterion("cdlinea <>", value, "cdlinea");
            return this;
        }

        public Criteria andCdlineaGreaterThan(Integer value) {
            addCriterion("cdlinea >", value, "cdlinea");
            return this;
        }

        public Criteria andCdlineaGreaterThanOrEqualTo(Integer value) {
            addCriterion("cdlinea >=", value, "cdlinea");
            return this;
        }

        public Criteria andCdlineaLessThan(Integer value) {
            addCriterion("cdlinea <", value, "cdlinea");
            return this;
        }

        public Criteria andCdlineaLessThanOrEqualTo(Integer value) {
            addCriterion("cdlinea <=", value, "cdlinea");
            return this;
        }

        public Criteria andCdlineaIn(List<Integer> values) {
            addCriterion("cdlinea in", values, "cdlinea");
            return this;
        }

        public Criteria andCdlineaNotIn(List<Integer> values) {
            addCriterion("cdlinea not in", values, "cdlinea");
            return this;
        }

        public Criteria andCdlineaBetween(Integer value1, Integer value2) {
            addCriterion("cdlinea between", value1, value2, "cdlinea");
            return this;
        }

        public Criteria andCdlineaNotBetween(Integer value1, Integer value2) {
            addCriterion("cdlinea not between", value1, value2, "cdlinea");
            return this;
        }

        public Criteria andCdlinguaIsNull() {
            addCriterion("cdlingua is null");
            return this;
        }

        public Criteria andCdlinguaIsNotNull() {
            addCriterion("cdlingua is not null");
            return this;
        }

        public Criteria andCdlinguaEqualTo(Integer value) {
            addCriterion("cdlingua =", value, "cdlingua");
            return this;
        }

        public Criteria andCdlinguaNotEqualTo(Integer value) {
            addCriterion("cdlingua <>", value, "cdlingua");
            return this;
        }

        public Criteria andCdlinguaGreaterThan(Integer value) {
            addCriterion("cdlingua >", value, "cdlingua");
            return this;
        }

        public Criteria andCdlinguaGreaterThanOrEqualTo(Integer value) {
            addCriterion("cdlingua >=", value, "cdlingua");
            return this;
        }

        public Criteria andCdlinguaLessThan(Integer value) {
            addCriterion("cdlingua <", value, "cdlingua");
            return this;
        }

        public Criteria andCdlinguaLessThanOrEqualTo(Integer value) {
            addCriterion("cdlingua <=", value, "cdlingua");
            return this;
        }

        public Criteria andCdlinguaIn(List<Integer> values) {
            addCriterion("cdlingua in", values, "cdlingua");
            return this;
        }

        public Criteria andCdlinguaNotIn(List<Integer> values) {
            addCriterion("cdlingua not in", values, "cdlingua");
            return this;
        }

        public Criteria andCdlinguaBetween(Integer value1, Integer value2) {
            addCriterion("cdlingua between", value1, value2, "cdlingua");
            return this;
        }

        public Criteria andCdlinguaNotBetween(Integer value1, Integer value2) {
            addCriterion("cdlingua not between", value1, value2, "cdlingua");
            return this;
        }

        public Criteria andDslineaIsNull() {
            addCriterion("dslinea is null");
            return this;
        }

        public Criteria andDslineaIsNotNull() {
            addCriterion("dslinea is not null");
            return this;
        }

        public Criteria andDslineaEqualTo(String value) {
            addCriterion("dslinea =", value, "dslinea");
            return this;
        }

        public Criteria andDslineaNotEqualTo(String value) {
            addCriterion("dslinea <>", value, "dslinea");
            return this;
        }

        public Criteria andDslineaGreaterThan(String value) {
            addCriterion("dslinea >", value, "dslinea");
            return this;
        }

        public Criteria andDslineaGreaterThanOrEqualTo(String value) {
            addCriterion("dslinea >=", value, "dslinea");
            return this;
        }

        public Criteria andDslineaLessThan(String value) {
            addCriterion("dslinea <", value, "dslinea");
            return this;
        }

        public Criteria andDslineaLessThanOrEqualTo(String value) {
            addCriterion("dslinea <=", value, "dslinea");
            return this;
        }

        public Criteria andDslineaLike(String value) {
            addCriterion("dslinea like", value, "dslinea");
            return this;
        }

        public Criteria andDslineaNotLike(String value) {
            addCriterion("dslinea not like", value, "dslinea");
            return this;
        }

        public Criteria andDslineaIn(List<String> values) {
            addCriterion("dslinea in", values, "dslinea");
            return this;
        }

        public Criteria andDslineaNotIn(List<String> values) {
            addCriterion("dslinea not in", values, "dslinea");
            return this;
        }

        public Criteria andDslineaBetween(String value1, String value2) {
            addCriterion("dslinea between", value1, value2, "dslinea");
            return this;
        }

        public Criteria andDslineaNotBetween(String value1, String value2) {
            addCriterion("dslinea not between", value1, value2, "dslinea");
            return this;
        }

        public Criteria andNrposiIsNull() {
            addCriterion("nrposi is null");
            return this;
        }

        public Criteria andNrposiIsNotNull() {
            addCriterion("nrposi is not null");
            return this;
        }

        public Criteria andNrposiEqualTo(Integer value) {
            addCriterion("nrposi =", value, "nrposi");
            return this;
        }

        public Criteria andNrposiNotEqualTo(Integer value) {
            addCriterion("nrposi <>", value, "nrposi");
            return this;
        }

        public Criteria andNrposiGreaterThan(Integer value) {
            addCriterion("nrposi >", value, "nrposi");
            return this;
        }

        public Criteria andNrposiGreaterThanOrEqualTo(Integer value) {
            addCriterion("nrposi >=", value, "nrposi");
            return this;
        }

        public Criteria andNrposiLessThan(Integer value) {
            addCriterion("nrposi <", value, "nrposi");
            return this;
        }

        public Criteria andNrposiLessThanOrEqualTo(Integer value) {
            addCriterion("nrposi <=", value, "nrposi");
            return this;
        }

        public Criteria andNrposiIn(List<Integer> values) {
            addCriterion("nrposi in", values, "nrposi");
            return this;
        }

        public Criteria andNrposiNotIn(List<Integer> values) {
            addCriterion("nrposi not in", values, "nrposi");
            return this;
        }

        public Criteria andNrposiBetween(Integer value1, Integer value2) {
            addCriterion("nrposi between", value1, value2, "nrposi");
            return this;
        }

        public Criteria andNrposiNotBetween(Integer value1, Integer value2) {
            addCriterion("nrposi not between", value1, value2, "nrposi");
            return this;
        }
    }
}